/******************************************************************************

                  版权所有 (C), 2013-2023, 深圳博思高科技有限公司

 ******************************************************************************
  文 件 名   : jsonUtils.c
  版 本 号   : 初稿
  作    者   : 张舵
  生成日期   : 2019年12月19日
  最近修改   :
  功能描述   : JSON数据处理C文件
  函数列表   :
  修改历史   :
  1.日    期   : 2019年12月19日
    作    者   : 张舵
    修改内容   : 创建文件

******************************************************************************/

/*----------------------------------------------*
 * 包含头文件                                   *
 *----------------------------------------------*/
#include "jsonUtils.h"
/*----------------------------------------------*
 * 宏定义                                       *
 *----------------------------------------------*/
#define JSON_ITEM_MAX_LEN   512


/*----------------------------------------------*
 * 常量定义                                     *
 *----------------------------------------------*/

/*----------------------------------------------*
 * 模块级变量                                   *
 *----------------------------------------------*/

/*----------------------------------------------*
 * 内部函数原型说明                             *
 *----------------------------------------------*/

/*****************************************************************************
 函 数 名  : GetJsonItem
 功能描述  : 获取JSON字符串中指定项目的值
 输入参数  : const char *jsonBuff  
             const char *item      
 输出参数  : 无
 返 回 值  : char
 
 修改历史      :
  1.日    期   : 2019年12月20日
    作    者   : 张舵
 char *GetJsonItem(const char *jsonBuff,const char *item)
    修改内容   : 新生成函数

*****************************************************************************/
char *GetJsonItem(const char *jsonBuff,const char *item)
{
 static char value[JSON_ITEM_MAX_LEN] = {0};     
 cJSON *root ,*json_item;
 root = cJSON_Parse((char *)jsonBuff);         //解析数据包
 
 if (!root)  
 {  
     log_d("Error before: [%s]\r\n",cJSON_GetErrorPtr());  
     return NULL;
 } 
 else
 {
     json_item = cJSON_GetObjectItem(root , item); 
     if(json_item->type == cJSON_String)
     {
         log_d("json item = :%s\r\n", json_item->valuestring);  

         //避免溢出
         if(strlen(json_item->valuestring) > JSON_ITEM_MAX_LEN)
         {
            memcpy(value, json_item->valuestring,JSON_ITEM_MAX_LEN); 
         }
         
         strcpy(value, json_item->valuestring);
         log_d("the cmd id =  %d\r\n",json_item->valuestring);
     }  
     else if(json_item->type == cJSON_Number)
     {
         log_d("json item = :%s\r\n", json_item->valueint);
         sprintf(value,"%d",json_item->valueint);
         log_d("the cmd id =  %d\r\n",json_item->valuestring);
     }
     else
     {
        log_d("can't parse json buff\r\n");  
        return NULL;
     }
       
 }

 return value;
}


