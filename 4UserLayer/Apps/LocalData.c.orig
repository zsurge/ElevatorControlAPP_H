/******************************************************************************

                  版权所有 (C), 2013-2023, 深圳博思高科技有限公司

 ******************************************************************************
  文 件 名   : LocalData.c
  版 本 号   : 初稿
  作    者   :  
  生成日期   : 2020年3月21日
  最近修改   :
  功能描述   : 管理本地数据，对卡号，用户ID为索引的数-
                   据进行增删改查
  函数列表   :
  修改历史   :
  1.日    期   : 2020年3月21日
    作    者   :  
    修改内容   : 创建文件

******************************************************************************/

/*----------------------------------------------*
 * 包含头文件                                   *
 *----------------------------------------------*/
#include "LocalData.h"
#include "bsp_spi_flash.h"
#include "easyflash.h"
#include "stdio.h"
#include "tool.h"
#include "malloc.h"
#include "bsp_MB85RC128.h"




#define LOG_TAG    "localData"
#include "elog.h"


/*----------------------------------------------*
 * 宏定义                                       *
 *----------------------------------------------*/

/*----------------------------------------------*
 * 常量定义                                     *
 *----------------------------------------------*/

/*----------------------------------------------*
 * 模块级变量                                   *
// *----------------------------------------------*/
uint16_t gCurCardHeaderIndex = 0;
uint16_t gCurUserHeaderIndex = 0;
uint16_t gCurRecordIndex = 0;
uint16_t gDelCardHeaderIndex = 0;    //已删除卡号索引
uint16_t gDelUserHeaderIndex = 0;    //已删除用户ID索引

USERDATA_STRU gUserDataStru = {0};


/*----------------------------------------------*
 * 内部函数原型说明                             *
 *----------------------------------------------*/
static uint8_t checkFlashSpace(uint8_t mode);
static void eraseUserDataIndex(void);
static ISFIND_ENUM findIndex(uint8_t* header,uint32_t address,uint16_t curIndex,uint16_t *index);
static uint32_t readDelIndexValue(uint8_t mode,uint16_t curIndex);

static uint8_t delSourceHeader(uint16_t index,uint8_t mode);


/*****************************************************************************
 函 数 名  : writeHeader
 功能描述  : 写表头文件
 输入参数  : uint8_t  * header  卡号或者是用户ID
             uint8_t mode   0：写卡号       1:写用户ID
 输出参数  : 无
 返 回 值  : 0:成功，其它：失败
 
 修改历史      :
  1.日    期   : 2020年3月24日
    作    者   :  
uint8_t writeHeader(uint8_t  * header,uint8_t mode)
    修改内容   : 新生成函数

*****************************************************************************/
uint8_t writeHeader(uint8_t  * header,uint8_t mode,uint32_t *headIndex)
{
    uint8_t times = 3;
    uint8_t readBuff[HEAD_lEN+1] = {0};
	uint8_t ret = 0;
    uint8_t headCnt[CARD_USER_LEN] = {0};
    uint8_t temp[HEAD_lEN+1] = {0};
    uint32_t addr = 0;
    uint32_t tempIndex = 0;     
    int32_t iTime1, iTime2;

    if(header == NULL || strlen((const char*)header) == 0)
    {
        return 1;
    }

//    log_d("writeHeader = %s\r\n",header);

    memset(temp,0x00,sizeof(temp));
    asc2bcd(temp, header,HEAD_lEN*2, 0);
    
   
    
    iTime1 = xTaskGetTickCount();	/* 记下开始时间 */ 

    if(mode == CARD_MODE)
    {
        if(gDelCardHeaderIndex > 0)
        {
            tempIndex = readDelIndexValue(CARD_MODE,gDelCardHeaderIndex-1);
            addr = CARD_NO_HEAD_ADDR + tempIndex * HEAD_lEN;
        }
        else
        {
            //依次写入
            addr = CARD_NO_HEAD_ADDR + gCurCardHeaderIndex * HEAD_lEN;
        }        
        
    }    
    else if(mode == USER_MODE)
    {
        if(gDelUserHeaderIndex > 0)
        {
            //写入已删除的空间中,根据已删除索引，获取到当前索引下卡或者用户的索引
            tempIndex = readDelIndexValue(USER_MODE,gDelUserHeaderIndex-1);
            addr = USER_ID_HEAD_ADDR + tempIndex * HEAD_lEN;
        }
        else
        {
            //依次写入
            addr = USER_ID_HEAD_ADDR + gCurUserHeaderIndex * HEAD_lEN;
        }    
    }
//    else if(mode == CARD_DEL_MODE)
//    {
//        if(gDelCardHeaderIndex > 0)
//        {
//            tempIndex = readDelIndexValue(CARD_DEL_MODE,gDelCardHeaderIndex);
//            addr = CARD_NO_HEAD_ADDR + tempIndex * HEAD_lEN;
//        }
//    }
//    else if(mode == USER_DEL_MODE)
//    {
//        if(gDelUserHeaderIndex > 0)
//        {
//            //写入已删除的空间中,根据已删除索引，获取到当前索引下卡或者用户的索引
//            tempIndex = readDelIndexValue(USER_DEL_MODE,gDelUserHeaderIndex);
//            addr = USER_ID_HEAD_ADDR + tempIndex * HEAD_lEN;
//        } 
//    }
    

    //log_d("addr = %d,tempIndex = %d,gDelCardHeaderIndex = %d\r\n",addr,tempIndex,gDelCardHeaderIndex);
    
   	while(times)
	{		
//		ret = bsp_sf_WriteBuffer (temp, addr, HEAD_lEN);
        ret = FRAM_Write(FM24V10_1, addr, temp,HEAD_lEN);
		//再读出来，对比是否一致
		memset(readBuff,0x00,sizeof(readBuff));
//		bsp_sf_ReadBuffer (readBuff, addr, HEAD_lEN);
        FRAM_Read (FM24V10_1, addr, readBuff, HEAD_lEN);		
		
		ret = compareArray(temp,readBuff,HEAD_lEN);
		
		if(ret == 0)
		{
			break;
		}

		if(ret != 0 && times == 1)
		{
            //log_d("write header error\r\n");
			return 3;
		}

		times--;
	} 	

    iTime2 = xTaskGetTickCount();	/* 记下结束时间 */
	printf("writeHeader %s 成功，耗时: %dms\r\n",header,iTime2 - iTime1);		

    iTime1 = xTaskGetTickCount();	/* 记下开始时间 */ 
    //这里需要保存  
    if(mode == CARD_MODE)
    {
        if(gDelCardHeaderIndex > 0)
        {
            *headIndex = tempIndex;
            gDelCardHeaderIndex--;
            memset(headCnt,0x00,sizeof(headCnt));
            sprintf((char *)headCnt,"%08d",gDelCardHeaderIndex);
            ef_set_env_blob("DelCardHeaderIndex",headCnt,CARD_USER_LEN);  
        }
        else 
        {
            *headIndex = gCurCardHeaderIndex++;
            memset(headCnt,0x00,sizeof(headCnt));
            sprintf((char *)headCnt,"%08d",gCurCardHeaderIndex);    
//            log_d(">>>>>>>>>>>>>\r\n");
            
            ef_set_env_blob("CardHeaderIndex",headCnt,CARD_USER_LEN);   

//            log_d(">>>>>>>>>>>>>___________________\r\n");
            
        }
    }
    else if(mode == USER_MODE)
    {
        if(gDelUserHeaderIndex > 0)
        {
            *headIndex = tempIndex;
            gDelUserHeaderIndex--;
            memset(headCnt,0x00,sizeof(headCnt));
            sprintf((char *)headCnt,"%08d",gDelUserHeaderIndex);
            ef_set_env_blob("DelUserHeaderIndex",headCnt,CARD_USER_LEN);   
        }
        else
        {
            *headIndex = gCurUserHeaderIndex++;
            memset(headCnt,0x00,sizeof(headCnt));
            sprintf((char *)headCnt,"%08d",gCurUserHeaderIndex);
            ef_set_env_blob("UserHeaderIndex",headCnt,CARD_USER_LEN);   
        }
    }

	//log_d("gCurCardHeaderIndex = %d,gCurUserHeaderIndex = %d\r\n",gCurCardHeaderIndex,gCurUserHeaderIndex);    
	//log_d("gDelCardHeaderIndex = %d,gDelUserHeaderIndex = %d\r\n",gDelCardHeaderIndex,gDelUserHeaderIndex);


    iTime2 = xTaskGetTickCount();	/* 记下结束时间 */
	printf("ef_set_env_blob 成功，耗时: %dms\r\n",iTime2 - iTime1);			
    return 0;
    
}

uint32_t readDelIndexValue(uint8_t mode,uint16_t curIndex)
{
    uint8_t readBuff[HEAD_lEN+1] = {0};
    uint8_t temp[HEAD_lEN*2+1] = {0};
    uint32_t addr = 0;
    uint32_t value = 0;

    memset(readBuff,0x00,sizeof(readBuff));
    //写入已删除的空间中,根据已删除索引，获取到当前索引下卡或者用户的索引

    if(mode == CARD_MODE)
    {
        addr = CARD_DEL_HEAD_ADDR + curIndex * HEAD_lEN;
    }
    else if(mode == USER_MODE)
    {
        addr = USER_DEL_HEAD_ADDR + curIndex * HEAD_lEN;
    }

    //log_d("curIndex = %d,addr = %d\r\n",curIndex,addr);
    
//    bsp_sf_ReadBuffer (readBuff, addr, HEAD_lEN);

    FRAM_Read (FM24V10_1, addr, readBuff, HEAD_lEN);    

    
    bcd2asc(temp, readBuff,HEAD_lEN*2, 0);    

    value = atoi((const char *)temp);

    //log_d("readDelIndexValue = %s,value =%d\r\n",temp,value);

    return value;

}




//isFind = 0 未找到；isFind = 1 已找到
/*****************************************************************************
 函 数 名  : searchHeaderIndex
 功能描述  : 查找指定的卡号/用户ID的索引值
 输入参数  : uint8_t* header 
           uint8_t mode     
           
 输出参数  : uint16_t *index 
 返 回 值  : 1:找到索引值 0:未找到索引值
 
 修改历史      :
  1.日    期   : 2020年3月24日
    作    者   :  
uint8_t searchHeaderIndex(uint8_t* header,uint8_t mode,uint16_t *index)
    修改内容   : 新生成函数

*****************************************************************************/
ISFIND_ENUM searchHeaderIndex(uint8_t* header,uint8_t mode,uint16_t *index)
{
	ISFIND_ENUM isFind = ISFIND_NO;
	uint8_t temp[HEAD_lEN] = {0};
	uint16_t retIndex = 0;

    if (header == NULL)
    {
        return isFind;
    }

	memset(temp,0x00,sizeof(temp));
    asc2bcd(temp, header,HEAD_lEN*2, 0);  

    if(mode == CARD_MODE)
    {
        isFind = findIndex(temp,CARD_NO_HEAD_ADDR,gCurCardHeaderIndex,&retIndex);
    }
    else if(mode == USER_MODE)
    {
        isFind = findIndex(temp,USER_ID_HEAD_ADDR,gCurUserHeaderIndex,&retIndex);        
    }
    else if(mode == CARD_DEL_MODE)
    {
        isFind = findIndex(temp,CARD_DEL_HEAD_ADDR,gDelCardHeaderIndex,&retIndex);        
    }
    else if(mode == USER_DEL_HEAD_ADDR)
    {
        isFind = findIndex(temp,USER_DEL_HEAD_ADDR,gDelUserHeaderIndex,&retIndex);        
    } 
    
    *index = retIndex;
    
    return isFind;   
     
}







#if 1
ISFIND_ENUM findIndex(uint8_t* header,uint32_t address,uint16_t curIndex,uint16_t *index)
{
    ISFIND_ENUM isFind = ISFIND_NO;     
    uint8_t i = 0;
    uint8_t multiple = 0;
	uint16_t remainder = 0;
	uint16_t loop = 0;   

//	int32_t iTime1, iTime2;	
    char buff[SECTOR_SIZE] = {0};
//   char *buff = mymalloc(SRAMCCM,SECTOR_SIZE);
    
//    if (buff == NULL)
//    {
//       myfree(SRAMCCM,buff);
//       log_d("my_malloc error\r\n");
//       return isFind;
//    }

    if(header == NULL)
    {
        myfree(SRAMCCM,buff);
        dbh("invalid header",header,4);
        return isFind;
    }
    
//    iTime1 = xTaskGetTickCount();	/* 记下开始时间 */ 
    
    multiple = curIndex / HEAD_NUM_SECTOR;
    remainder = curIndex % HEAD_NUM_SECTOR;

    //log_d("multiple = %d,remainder = %d\r\n",multiple,remainder);
    
    for(i= 0;i<multiple;i++)
    {
        memset(buff,0x00,sizeof(buff));
//        bsp_sf_ReadBuffer ((uint8_t *)buff, address+i*SECTOR_SIZE, SECTOR_SIZE); 
        FRAM_Read (FM24V10_1, address+i*SECTOR_SIZE, buff, SECTOR_SIZE);        

        for(loop=0; loop<HEAD_NUM_SECTOR; loop++)
        {
            if(memcmp(header,buff+loop*HEAD_lEN,HEAD_lEN) == 0)
            {
                isFind = ISFIND_YES;
                *index = loop + i*HEAD_NUM_SECTOR;

                //       my_free(buff);
                myfree(SRAMCCM,buff);
                
//                iTime2 = xTaskGetTickCount();	/* 记下结束时间 */
//            	log_d("findIndex成功，耗时: %dms\r\n",iTime2 - iTime1);		                   
                return isFind;
            }        
        }
    }    

    memset(buff,0x00,sizeof(buff));
//    bsp_sf_ReadBuffer ((uint8_t *)buff, address + multiple*SECTOR_SIZE, remainder*HEAD_lEN); 
 
    FRAM_Read (FM24V10_1,address + multiple*SECTOR_SIZE, buff, remainder*HEAD_lEN);     
    
    for(loop=0; loop<remainder; loop++)
    {
        if(memcmp(header,buff+loop*HEAD_lEN,HEAD_lEN) == 0)
        {
            isFind = ISFIND_YES;
            *index = loop + i*HEAD_NUM_SECTOR;
    
            //       my_free(buff);
                   myfree(SRAMCCM,buff);
//    iTime2 = xTaskGetTickCount();	/* 记下结束时间 */
//	log_d("findIndex成功，耗时: %dms\r\n",iTime2 - iTime1);		               
            return isFind;
        }        
    } 
    
    *index = 0;
    //       my_free(buff);
           myfree(SRAMCCM,buff);
    return isFind;
}

#endif 


void eraseUserDataAll(void)
{
    int32_t iTime1, iTime2;
    iTime1 = xTaskGetTickCount();	/* 记下开始时间 */
    eraseHeadSector();
    eraseDataSector();    
    iTime2 = xTaskGetTickCount();	/* 记下结束时间 */
	log_d("eraseUserDataAll成功，耗时: %dms\r\n",iTime2 - iTime1);
}

static void eraseUserDataIndex(void)
{
    uint8_t headCnt[CARD_USER_LEN] = {0};
    gCurCardHeaderIndex = 0;
    sprintf((char *)headCnt,"%08d",gCurCardHeaderIndex);
    ef_set_env_blob("CardHeaderIndex",headCnt,CARD_USER_LEN);    

    memset(headCnt,0x00,sizeof(headCnt));
    gCurUserHeaderIndex = 0;
    sprintf((char *)headCnt,"%08d",gCurUserHeaderIndex);
    ef_set_env_blob("UserHeaderIndex",headCnt,CARD_USER_LEN);      

    gDelCardHeaderIndex = 0;
    sprintf((char *)headCnt,"%08d",gDelCardHeaderIndex);
    ef_set_env_blob("DelCardHeaderIndex",headCnt,CARD_USER_LEN);    

    memset(headCnt,0x00,sizeof(headCnt));
    gDelUserHeaderIndex = 0;
    sprintf((char *)headCnt,"%08d",gDelUserHeaderIndex);
    ef_set_env_blob("DelUserHeaderIndex",headCnt,CARD_USER_LEN);          

}


void eraseHeadSector(void)
{  
    uint32_t size = CARD_HEAD_SECTOR_NUM*4;

//    for(i=0;i<CARD_HEAD_SECTOR_NUM+USER_HEAD_SECTOR_NUM+CARD_HEAD_DEL_SECTOR_NUM+USER_HEAD_DEL_SECTOR_NUM;i++)
//    {
//        bsp_sf_EraseSector(CARD_NO_HEAD_ADDR+i*SECTOR_SIZE);
        FRAM_Erase(FM24V10_1,0,size);
//    }

    eraseUserDataIndex();
}
void eraseDataSector(void)
{  
    uint16_t i = 0;

    for(i=0;i<DATA_SECTOR_NUM;i++)
    {
        bsp_sf_EraseSector(CARD_NO_DATA_ADDR+i*SECTOR_SIZE);
        bsp_sf_EraseSector(USER_ID_DATA_ADDR+i*SECTOR_SIZE);
    }
}


uint8_t writeUserData(USERDATA_STRU userData,uint8_t mode)
{
    uint8_t wBuff[255] = {0};
    uint8_t rBuff[255] = {0}; 
    uint8_t isFull = 0;
    uint8_t header[CARD_USER_LEN] = {0};
    uint8_t crc=0;
    uint8_t ret = 0;
    uint8_t times = 3;
    uint32_t addr = 0;
    uint32_t index = 0;
    
    int32_t iTime1, iTime2;
    
    iTime1 = xTaskGetTickCount();	/* 记下开始时间 */ 
	
    //检查存储空间是否已满；
    isFull = checkFlashSpace(mode);

    if(isFull == 1)
    {
        return 1; //提示已经满了
    }  

    if(mode == CARD_MODE)
    {
        memcpy(header,userData.cardNo,CARD_USER_LEN);
    }
    else
    {
        memcpy(header,userData.userId,CARD_USER_LEN);
    }

    if(header == NULL)
    {
       return 1;//提示表头无效
    }    
    
   //写表头
   ret = writeHeader(header,mode,&index);

    if(ret != 0)
    {
       return 1;//提示写表头失败
    }    

    //获取地址
    if(mode == CARD_MODE )
    {
        addr = CARD_NO_DATA_ADDR + index * (sizeof(USERDATA_STRU));;
    }
    else if(mode == USER_MODE)
    {
        addr = USER_ID_DATA_ADDR + index * (sizeof(USERDATA_STRU));
    }
    
    //log_d("writeHeader success! index = %d,addr = %d\r\n",index,addr);
    
    
    //packet write buff
    memset(wBuff,0x00,sizeof(wBuff));  

    //copy to buff
    memcpy(wBuff, &userData, sizeof(USERDATA_STRU)-1);


    //这里应该打印一下WBUFF，看数据是否正确

    //calc crc
    crc = xorCRC(wBuff, sizeof(USERDATA_STRU)-1);

    //copy crc
    wBuff[sizeof(USERDATA_STRU)-1] = crc;	


    //write flash
	while(times)
	{
	
		bsp_sf_WriteBuffer (wBuff, addr, sizeof(USERDATA_STRU));

		//再读出来，对比是否一致
		memset(rBuff,0x00,sizeof(rBuff));
		bsp_sf_ReadBuffer (rBuff, addr, sizeof(USERDATA_STRU));		
		ret = compareArray(wBuff,rBuff,sizeof(USERDATA_STRU));
		
		if(ret == 0)
		{
			break;
		}
				

		if(ret != 0 && times == 1)
		{
			//log_d("写交易记录表失败!\r\n");
			return 3;
		}

		times--;
	}

    iTime2 = xTaskGetTickCount();	/* 记下结束时间 */
	log_d("writeUserData成功，耗时: %dms\r\n",iTime2 - iTime1);	

//    dbh("writeUserData", wBuff, sizeof(USERDATA_STRU));

    return 0;
}

uint8_t readUserData(uint8_t* header,uint8_t mode,USERDATA_STRU *userData)
{
	uint8_t rBuff[255] = {0};
	uint8_t crc = 0;	
	uint8_t ret = 0;
	uint16_t index = 0;
    uint32_t addr = 0;
    
//    int32_t iTime1, iTime2;
//    iTime1 = xTaskGetTickCount();	/* 记下开始时间 */
    

	if(header == NULL)
	{
        //log_d("invalid head\r\n"); 
        return 1; //提示错误的参数
	}

		
	ret = searchHeaderIndex(header,mode,&index);
	
	if(ret != 1)
	{
        //log_d("can't find the head index\r\n");    
	
		return 3;//提示未找到索引
	}
	
    //log_d("searchHeaderIndex success! index = %d\r\n",index);
    
    if(mode == CARD_MODE)
    {
        addr = CARD_NO_DATA_ADDR + index * (sizeof(USERDATA_STRU));
    }
    else if(mode == USER_MODE)
    {
        addr = USER_ID_DATA_ADDR + index * (sizeof(USERDATA_STRU));
    }	

    bsp_sf_ReadBuffer (rBuff, addr, sizeof(USERDATA_STRU));

    //judge head
	if(rBuff[0] != TABLE_HEAD)
	{
        //log_d("invalid start char\r\n");    	
		return 4;
	}

    //calc crc
	crc = xorCRC(rBuff, sizeof(USERDATA_STRU)-1);

	//judge crc
	if(crc != rBuff[sizeof(USERDATA_STRU) - 1])
	{
        //log_d("crc check error\r\n");   
		return 5;
	}

	memcpy(userData, rBuff, sizeof(USERDATA_STRU));



//    iTime2 = xTaskGetTickCount();	/* 记下结束时间 */
//	log_d("readUserData成功，耗时: %dms\r\n",iTime2 - iTime1);		

    //dbh("readUserData", (char *)rBuff, sizeof(USERDATA_STRU));

	return 0;

}


static uint8_t checkFlashSpace(uint8_t mode)
{
    if(mode == CARD_MODE)
    {
        if(gCurCardHeaderIndex > MAX_HEAD_RECORD-5)
        {
            //log_d("card flash is full\r\n");

            return 1;
        }
    }
    else
    {
        if(gCurUserHeaderIndex > MAX_HEAD_RECORD-5)
        {
            //log_d("card flash is full\r\n");
            return 1;
        }        
    }


    return 0;
}



uint8_t modifyUserData(USERDATA_STRU userData,uint8_t mode)
{
    uint8_t wBuff[255] = {0};
    uint8_t rBuff[255] = {0}; 
    uint8_t isFull = 0;
    uint8_t header[CARD_USER_LEN] = {0};
    uint8_t crc=0;
    uint8_t ret = 0;
    uint8_t times = 3;
    uint32_t addr = 0;
    uint16_t index = 0;
    
    int32_t iTime1, iTime2;
	//log_d("sizeof(USERDATA_STRU) = %d\r\n",sizeof(USERDATA_STRU));
    
    iTime1 = xTaskGetTickCount();	/* 记下开始时间 */
 
	
    //检查存储空间是否已满；
    isFull = checkFlashSpace(mode);

    if(isFull == 1)
    {
        //log_d("not enough speac storage the data\r\n");    
        return 1; //提示已经满了
    } 

    if(mode == CARD_MODE)
    {
        memcpy(header,userData.cardNo,CARD_USER_LEN);
    }
    else
    {
        memcpy(header,userData.userId,CARD_USER_LEN);
    }   

	ret = searchHeaderIndex(header,mode,&index);

	//log_d("searchHeaderIndex ret = %d",ret);
	
	if(ret != 1)
	{
	    //log_d("can't find the head index\r\n");
		return 3;//提示未找到索引
	}

	if(mode == CARD_MODE)
	{
        addr = CARD_NO_DATA_ADDR + index * (sizeof(USERDATA_STRU));
    }
    else
    {
        addr = USER_ID_DATA_ADDR + index * (sizeof(USERDATA_STRU));
    }

    //packet write buff
    memset(wBuff,0x00,sizeof(wBuff)); 
	
    //copy to buff
    memcpy(wBuff, &userData, sizeof(USERDATA_STRU));
	
    //calc crc
	crc = xorCRC(wBuff, sizeof(USERDATA_STRU)-1);

	//copy crc
	wBuff[sizeof(USERDATA_STRU) - 1] = crc;	


    //write flash
	while(times)
	{
	
		bsp_sf_WriteBuffer (wBuff, addr, sizeof(USERDATA_STRU));

		//再读出来，对比是否一致
		memset(rBuff,0x00,sizeof(rBuff));
		bsp_sf_ReadBuffer (rBuff, addr, sizeof(USERDATA_STRU));

		ret = compareArray(wBuff,rBuff,sizeof(USERDATA_STRU));
		
		if(ret == 0)
		{
			break;
		}
				

		if(ret != 0 && times == 1)
		{
			//log_d("modify record is error\r\n");
			return 3;
		}

		times--;
	}

    iTime2 = xTaskGetTickCount();	/* 记下结束时间 */
	log_d("修改记录成功，耗时: %dms\r\n",iTime2 - iTime1);	

    return 0;
}

uint8_t delUserData(uint8_t *header,uint8_t mode)
{
    uint8_t wBuff[255] = {0};
    uint8_t rBuff[255] = {0}; 
    uint8_t isFull = 0;
    uint8_t ret = 0;
    uint8_t times = 3;
    uint32_t addr = 0;
    uint16_t index = 0;
    
    int32_t iTime1, iTime2;
    //log_d("sizeof(USERDATA_STRU) = %d\r\n",sizeof(USERDATA_STRU));
    
    iTime1 = xTaskGetTickCount();   /* 记下开始时间 */
 
    
    //检查存储空间是否已满；
    isFull = checkFlashSpace(mode);

    if(isFull == 1)
    {
        //log_d("not enough speac storage the data\r\n");    
        return 1; //提示已经满了
    }  

    ret = searchHeaderIndex(header,mode,&index);

    log_d("searchHeaderIndex index = %d",index);
    
    if(ret != 1)
    {
        //log_d("can't find the head index\r\n");
        return 3;//提示未找到索引
    }

    if(mode == CARD_MODE)
    {
        addr = CARD_NO_DATA_ADDR + index * (sizeof(USERDATA_STRU));
    }
    else if(mode == USER_MODE)
    {
        addr = USER_ID_DATA_ADDR + index * (sizeof(USERDATA_STRU));
    }

    //packet write buff
    memset(wBuff,0xFF,sizeof(wBuff));   

    //write flash
    while(times)
    {    
        bsp_sf_WriteBuffer (wBuff, addr, sizeof(USERDATA_STRU));

        //再读出来，对比是否一致
        memset(rBuff,0x00,sizeof(rBuff));
        bsp_sf_ReadBuffer (rBuff, addr, sizeof(USERDATA_STRU));

        ret = compareArray(wBuff,rBuff,sizeof(USERDATA_STRU));
        
        if(ret == 0)
        {
            break;
        }
                

        if(ret != 0 && times == 1)
        {
            //log_d("modify record is error\r\n");
            return 3;
        }

        times--;
    }

    //写删除索引
    //删除索引值为原索引的值
    memset(header,0x00,sizeof((const char *)header));
    sprintf((char *)header,"%08d",index);
    
    //log_d("need del header value = %s,\r\n",header);
    
    ret = writeDelHeader(header,mode);    
    if(ret != 0)
    {
        //log_d("write del index error\r\n");
        return 5;//提示未找到索引
    }

    //删除原索引    
    ret = delSourceHeader(index,mode);
    if(ret != 0)
    {
        //log_d("write del source index error\r\n");
        return 6;//提示未找到索引
    }


    iTime2 = xTaskGetTickCount();   /* 记下结束时间 */
    log_d("修改记录成功，耗时: %dms\r\n",iTime2 - iTime1); 

    return 0;
}


uint8_t writeDelHeader(uint8_t* header,uint8_t mode)
{
    uint8_t times = 3;
    uint8_t readBuff[HEAD_lEN+1] = {0};
	uint8_t ret = 0;
    uint8_t headCnt[CARD_USER_LEN] = {0};
    uint8_t temp[HEAD_lEN+1] = {0};
    uint32_t addr = 0;
    
    if(mode == CARD_MODE)
    {
        addr = CARD_DEL_HEAD_ADDR + gDelCardHeaderIndex * HEAD_lEN;
    }
    else if(mode == USER_MODE)
    {
        addr = USER_DEL_HEAD_ADDR + gDelUserHeaderIndex * HEAD_lEN;
    }

    if(header == NULL || strlen((const char*)header) == 0)
    {
        //log_d("<<<<<<<<<<<<<<cardNoHeader is empty>>>>>>>>>>>>>>\r\n");
        return 1;
    }

    log_d("<<<<<<<<<<<<<<write del Header = %s,addr = %d>>>>>>>>>>>>>>\r\n",header,addr);

    memset(temp,0x00,sizeof(temp));
    asc2bcd(temp, header,HEAD_lEN*2, 0);    

   	while(times)
	{		
//		ret = bsp_sf_WriteBuffer (temp, addr, HEAD_lEN);
		ret = FRAM_Write(FM24V10_1, addr, temp,HEAD_lEN);
        
		//再读出来，对比是否一致
		memset(readBuff,0x00,sizeof(readBuff));
//		bsp_sf_ReadBuffer (readBuff, addr, HEAD_lEN);
        FRAM_Read (FM24V10_1, addr, readBuff, HEAD_lEN);   		
		
		ret = compareArray(temp,readBuff,HEAD_lEN);
		
		if(ret == 0)
		{
			break;
		}

		if(ret != 0 && times == 1)
		{
            //log_d("write header error\r\n");
			return 3;
		}

		times--;
	} 

    //这里需要保存  
    if(mode == CARD_MODE)
    {
        gDelCardHeaderIndex++;
        memset(headCnt,0x00,sizeof(headCnt));
        sprintf((char *)headCnt,"%08d",gDelCardHeaderIndex);
        ef_set_env_blob("DelCardHeaderIndex",headCnt,CARD_USER_LEN);       
                         
    }
    else
    {
        gDelUserHeaderIndex++;
        memset(headCnt,0x00,sizeof(headCnt));
        sprintf((char *)headCnt,"%08d",gDelUserHeaderIndex);
        ef_set_env_blob("DelUserHeaderIndex",headCnt,CARD_USER_LEN);           
    }

	log_d("gDelCardHeaderIndex = %d,gDelUserHeaderIndex = %d\r\n",gDelCardHeaderIndex,gDelUserHeaderIndex);

    
    return 0;    

}

static uint8_t delSourceHeader(uint16_t index,uint8_t mode)
{
    uint8_t times = 3;
    uint8_t readBuff[HEAD_lEN+1] = {0};
    uint8_t ret = 0;
    uint8_t temp[HEAD_lEN+1] = {0};
    uint32_t addr = 0;
    
    if(mode == CARD_MODE)
    {
        addr = CARD_NO_HEAD_ADDR + index * HEAD_lEN;
    }
    else if(mode == USER_MODE)
    {
        addr = USER_ID_HEAD_ADDR + index * HEAD_lEN;
    }

    memset(temp,0xFF,sizeof(temp));
    
    while(times)
    {       
//        ret = bsp_sf_WriteBuffer (temp, addr, HEAD_lEN);
        ret = FRAM_Write(FM24V10_1, addr, temp,HEAD_lEN);
        
        //再读出来，对比是否一致
        memset(readBuff,0x00,sizeof(readBuff));
//        bsp_sf_ReadBuffer (readBuff, addr, HEAD_lEN);
        FRAM_Read (FM24V10_1, addr, readBuff, HEAD_lEN);   
        
        ret = compareArray(temp,readBuff,HEAD_lEN);
        
        if(ret == 0)
        {
            break;
        }

        if(ret != 0 && times == 1)
        {
            log_d("write header error\r\n");
            return 3;
        }

        times--;
    } 
    
    return 0;    

}




void TestFlash(uint8_t mode)
{
    char buff[156] = {0};
    uint8_t temp[4] = {0};
    uint32_t addr = 0;
    uint32_t data_addr = 0;
    uint16_t i = 0;
    uint32_t num = 0;

     if (buff == NULL )
     {
        my_free(buff);
        //log_d("my_malloc error\r\n");
        return ;
     }

    memset(temp,0x00,sizeof(temp));
     
    if(mode == CARD_MODE)
    {
        addr = CARD_NO_HEAD_ADDR;
        data_addr = CARD_NO_DATA_ADDR;
        num = gCurCardHeaderIndex;
    }
    else if(mode == USER_MODE)
    {
        addr = USER_ID_HEAD_ADDR;   
        data_addr = USER_ID_DATA_ADDR;
        num = gCurUserHeaderIndex;        
    } 
    else if(mode == CARD_DEL_MODE)
    {
        addr = CARD_DEL_HEAD_ADDR;   
        num = gDelCardHeaderIndex;        
    } 
    else if(mode == USER_DEL_MODE)
    {
        addr = USER_DEL_HEAD_ADDR;   
        num = gDelUserHeaderIndex;        
    }     

    for(i=0;i<num;i++)
    {
        memset(temp,0x00,sizeof(temp));
        memset(buff,0x00,sizeof(buff));
//        bsp_sf_ReadBuffer (temp, addr+i*4, 4);
        FRAM_Read(FM24V10_1, addr+i*4, temp, 4);
        bcd2asc((uint8_t *)buff, temp, 8, 0);
        printf("the %d header ====================== %s\r\n",i,buff);    
 
    }

    for(i=0;i<num;i++)
    {
        memset(buff,0x00,sizeof(buff));
        bsp_sf_ReadBuffer ((uint8_t *)buff, data_addr+i * (sizeof(USERDATA_STRU)), sizeof(USERDATA_STRU));        
        printf("the %d data ====================== \r\n",i); 
        dbh("data", buff, (sizeof(USERDATA_STRU)));

    }    

}


